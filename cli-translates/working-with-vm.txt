LAB2 WORKING WITH VIRTUAL MACHINE

Task 1: Creating the VM with reserved IP address

To create a vm with reserved IP address, first we need to reserve the IP and attach it to the vm at creation.

gcloud compute addresses create mc-server-ip --region=us-central1   #to reserve the ip address

gcloud compute instances create mc-server \
--zone=us-central1-a \
--machine-type=n1-standard-1 \
--subnet=default \
--address=mc-server-ip \
--image=debian-9-stretch-v20200902 \
--image-project=debian-cloud \
--scopes=storage-rw \
--create-disk=name=minecraft-disk,type=pd-ssd,size=50,device-name=minecraft-disk \
--tags=minecraft-server \
--project=qwiklabs-gcp-03-ef3ef8dad088

Task 2: Preparing the data disk

sudo mkdir -p /home/minecraft #to create a directory where we mount our disk

sudo mkfs.ext4 -F -E lazy_itable_init=0,\
lazy_journal_init=0,discard \
/dev/disk/by-id/google-minecraft-disk #to format our disk

sudo mount -o discard,defaults /dev/disk/by-id/google-minecraft-disk /home/minecraft #to mount the disk

Task 3: Installing and runing the application

gcloud compute ssh mc-server --zone=us-central1-a #to ssh into our vm

sudo apt-get update #to update the repository

sudo apt-get install -y default-jre-headless #to install the headless JRE

cd /home/minecraft  #to navigate to the directory where our pd-ssd is mounted 

sudo apt-get install wget -y   #to install wget

sudo wget https://launcher.mojang.com/v1/objects/d0d0fe2b1dc6ab4c65554cb734270872b72dadd6/server.jar #to download Minecraft server JAR file

**Initializing the Minecraft server

sudo java -Xmx1024M -Xms1024M -jar server.jar nogui

sudo nano eula.txt #we edit the EULA file to accept the terms so that our server can run.

****Creating a virtual terminal screen to start the Minecraft server

sudo apt-get install -y screen  #to install Screen

sudo screen -S mcs java -Xmx1024M -Xms1024M -jar server.jar nogui  #to start minecraft server in a screen virtual terminal

***Detaching from the screen and close our SSH session

Ctrl+A, Ctrl+D #to detach from Screen and have the server run in the background

sudo screen -r mcs   #to reattach to Screen

exit #to exite our ssh session


Task 4: Allow client traffic

***Creating a firewall rule to allow incoming traffic to our server on port TCP 25565

gcloud compute firewall-rules create minecraft-rule --direction=INGRESS --network=default --priority=1000 --action=ALLOW --rules=tcp:25565 --source-ranges=0.0.0.0/0 --target-tags=minecraft-server

We use https://mcsrvstat.us/ to test our Minecraft server, by copy and pasting the external IP in the address bar on the website.

Task 5: Schedule regular backups

gcloud compute ssh mc-server --zone=us-central1-a #to ssh into our vm

export YOUR_BUCKET_NAME=mc-server-bkt  #to store our bucket name in an environment variable

echo $YOUR_BUCKET_NAME  #verifying it with echo

gsutil mb gs://$YOUR_BUCKET_NAME-minecraft-backup  #to create a bucket for our backup

****Creating a backup script

cd /home/minecraft  #navigate to minecraft dir

sudo nano /home/minecraft/backup.sh #to create and edit our backup script file

------------------------content of the script---------------

#!/bin/bash
screen -r mcs -X stuff '/save-all\n/save-off\n'
/usr/bin/gsutil cp -R ${BASH_SOURCE%/*}/world gs://${YOUR_BUCKET_NAME}-minecraft-backup/$(date "+%Y%m%d-%H%M%S")-world
screen -r mcs -X stuff '/save-on\n'

-------------------------END of the script--------------------

ctrl+O and ctrl+X to save and exit the file

sudo chmod 755 /home/minecraft/backup.sh   #to make our script executable

***Testing the backup script and schedule a cron job

. /home/minecraft/backup.sh  #to run the script

gsutil ls gs://$YOUR_BUCKET_NAME-minecraft-backup #After the script finishes, we verify that the backup file was written to the bucket

sudo crontab -e #to open the cron table to edit with nano editor

0 */4 * * * /home/minecraft/backup.sh #pasting this line at the bottom of the cron table to instructs cron to run backups every 4 hours.

ctrl+O and ctrl+X #to save and exit the cron table

Task 6: Server maintenance

To perform server maintenance, we need to shut down the server.

ssh back into the server if exited the session 

sudo screen -r -X stuff '/stop\n' #to stop the server 

gcloud compute instances stop mc-server #to shutdown the vm

********Automate server maintenance with startup and shutdown scripts

We are adding a startup and shutdown script to our VM to automate the process of mounting the persistent disk and launching the server application in a screen

gcloud compute instances add-metadata mc-server \
--metadata startup-script-url=https://storage.googleapis.com/cloud-training/archinfra/mcserver/startup.sh

gcloud compute instances add-metadata mc-server \
--metadata shutdown-script-url=https://storage.googleapis.com/cloud-training/archinfra/mcserver/shutdown.sh

-----------------------------------------END OF LAB----------------------------